#In order to build the kernel a gcc crosscompiler is required.
#In this file a assembled all the commands I could find that I used to build mine.
#This will also give you an idea of the versions of the tools I used so that you can mimic it incase you’re having trouble building the kernel
#A temporary folder where all the source files will be kept, you can delete it afterwards
mkdir src
cd src

#Make sure everyting is installed and up to date relative to gcc version you want to build.
sudo apt-get install build-essential flex libgmp3-dev  libmpfr-dev libmpfr-doc libmpfr4 libmpfr4-dbg g++ make gawk mpc


http://ftp.gnu.org/gnu/binutils/binutils-2.27.tar.gz
wget http://ftpmirror.gnu.org/gcc/gcc-6.2.0/gcc-6.2.0.tar.gz
wget http://ftpmirror.gnu.org/glibc/glibc-2.24.tar.xz
wget http://ftpmirror.gnu.org/mpfr/mpfr-3.1.4.tar.xz
wget http://ftpmirror.gnu.org/gmp/gmp-6.1.1.tar.xz
wget http://ftpmirror.gnu.org/mpc/mpc-1.0.3.tar.gz
wget ftp://gcc.gnu.org/pub/gcc/infrastructure/isl-0.16.1.tar.bz2
wget ftp://gcc.gnu.org/pub/gcc/infrastructure/cloog-0.18.1.tar.gz

wget https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.17.2.tar.xz


for f in *.tar*; do tar xf $f; done

cd gcc-6.2.0
ln -s ../mpfr-3.1.4 mpfr
ln -s ../gmp-6.1.1 gmp
ln -s ../mpc-1.0.3 mpc
ln -s ../isl-0.16.1 isl
ln -s ../cloog-0.18.1 cloog
cd ..

sudo mkdir -p /opt/cross
sudo chown username /opt/cross

export PREFIX="/opt/cross"
export TARGET=x86_64-elf
export PATH="$PREFIX/bin:$PATH"

cd $HOME/src
 
mkdir build-binutils
cd build-binutils
../binutils-2.27/configure --target=$TARGET --prefix="$PREFIX" --with-sysroot --disable-nls --disable-werror
make
make install

cd $HOME/src
 
# The $PREFIX/bin dir _must_ be in the PATH. We did that above.
which -- $TARGET-as || echo $TARGET-as is not in the PATH
 
mkdir build-gcc
cd build-gcc
../gcc-6.2.0/configure --target=$TARGET --prefix="$PREFIX" --disable-nls --enable-languages=c,c++ --without-headers
make all-gcc
make all-target-libgcc
make install-gcc
make install-target-libgcc

#Add this to end of bashrc
sudo gedit ~/.bashrc
export PATH="$HOME/opt/cross/bin:$PATH"


#####BOCHS#######
#Download latest version on the web
sudo apt-get install libgtk2.0-dev libncurses5-dev libsdl2-dev
./configure --enable-smp \
              --enable-cpu-level=6 \
              --enable-all-optimizations \
              --enable-x86-64 \
              --enable-pci \
              --enable-vmx=2 \
              --enable-debugger \
              --enable-disasm \
              --enable-debugger-gui \
              --enable-logging \
              --enable-fpu \
              --enable-3dnow \
              --enable-sb16=dummy \
              --enable-cdrom \
              --enable-x86-debugger \
              --enable-iodebug \
              --disable-plugins \
              --disable-docbook \
              --with-x --with-x11 --with-term --with-sdl

make
make install

#####NASM#######
sudo apt-get install nasm

#####Building and testing#######
To build the kernel, you can use the build.sh script, irst you'll need to give it per;ission on Linux:
chmod 777 build.sh
cd /media
sudo mkdir floppy1
sudo chmod 777 /media
Then you can run it, if you copy to Protype folder to your home directory
./build.sh
To test:
bochs -q -f bin/bochsrc.txt

#####Code-editor: Atom#######
sudo add-apt-repository ppa:webupd8team/atom
sudo apt-get update
sudo apt-get install atom

http://wiki.osdev.org/GCC_Cross-Compiler
http://preshing.com/20141119/how-to-build-a-gcc-cross-compiler/
