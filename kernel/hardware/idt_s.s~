;Pro-Type Kernel v1.3  ;
;IDT assembler code    ;
;by LegendMythe        ;

%define apic_eoi	0x00B0

[GLOBAL flush_idt]                ; Allows the C code to call idt_flush().
flush_idt:
    mov eax, [esp+4]              ; Get the pointer to the IDT, passed as a parameter. 
    lidt [eax]                    ; Load the IDT pointer.
    ret

[GLOBAL isr_common_stub]
[EXTERN isr_handler]
isr_common_stub:
    pusha                         ; Pushes edi,esi,ebp,esp,ebx,edx,ecx,eax
      
    xor eax, eax                  ; Erase eax
    mov ax, ds                    ; Lower 16-bits of eax = ds.
    push eax                      ; Save the data segment descriptor
      
    mov ax, 0x10                  ; Load the kernel data segment descriptor
    mov ds, ax      
    mov es, ax      
    mov fs, ax      
    mov gs, ax      
      
    push esp    	                ; Push a pointer to the current top of stack - this becomes the registers_t* parameter.
    call isr_handler              ; Call into our C code.
    add esp, 4		                ; Remove the registers_t* parameter.
      
    pop ebx                       ; Reload the original data segment descriptor
    mov ds, bx      
    mov es, bx      
    mov fs, bx      
    mov gs, bx      
      
    popa                          ; Pops edi,esi,ebp...
    add esp, 8                    ; Cleans up the pushed error code and pushed ISR number
    sti     
    iret                          ; pops 5 things at once: CS, EIP, EFLAGS, SS, and ESP

[GLOBAL apic_routine]
[EXTERN apic_base]
[EXTERN apic_timer]
apic_routine:
  cli                             ; Dissable interrupts                           
  pusha                           ; Save registers

  mov eax, [apic_base]            ; Apic Base in C-code
  mov dword [eax + apic_eoi],  0  ; Send EOI to LAPIC
  
  call apic_timer                 ; Call C function                      
  
  popa                            ; Restore GPR
  iret                            ; Return to code

[GLOBAL apic_spurious]
apic_spurious:                    ; Spurious Interrupt for IOAPIC
iret                              ; No EOI

ISR_NOERRCODE 0
ISR_NOERRCODE 1
ISR_NOERRCODE 2
ISR_NOERRCODE 3
ISR_NOERRCODE 4
ISR_NOERRCODE 5
ISR_NOERRCODE 6
ISR_NOERRCODE 7
ISR_ERRCODE   8
ISR_NOERRCODE 9
ISR_ERRCODE   10
ISR_ERRCODE   11
ISR_ERRCODE   12
ISR_ERRCODE   13
ISR_ERRCODE   14
ISR_NOERRCODE 15
ISR_NOERRCODE 16
ISR_NOERRCODE 17
ISR_NOERRCODE 18
ISR_NOERRCODE 19
ISR_NOERRCODE 20
ISR_NOERRCODE 21
ISR_NOERRCODE 22
ISR_NOERRCODE 23
ISR_NOERRCODE 24
ISR_NOERRCODE 25
ISR_NOERRCODE 26
ISR_NOERRCODE 27
ISR_NOERRCODE 28
ISR_NOERRCODE 29
ISR_NOERRCODE 30
ISR_NOERRCODE 31

%macro ISR_NOERRCODE 1
global isr%1
  isr%1:
    cli                         ; Disable interrupts firstly
    push 0                      ; Push a dummy error code.
    push %1                     ; Push the interrupt number.
    jmp isr_common_stub         ; Go to our common handler code.
%endmacro

%macro ISR_ERRCODE 1
global isr%1
  isr%1:
    cli                         ; Disable interrupts.
    push %1                     ; Push the interrupt number
    jmp isr_common_stub
%endmacro